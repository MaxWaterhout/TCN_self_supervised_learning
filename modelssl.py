# -*- coding: utf-8 -*-
"""modelSSL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PfUedRHuWvTCUCr__avF_jtX1AARWczR
"""

import torch
from torch import nn
model = torch.hub.load('pytorch/vision:v0.10.0', 'inception_v3', pretrained=True)
#model.eval()

# define an identity layer to replace layers after mixed_5d
class Identity(nn.Module): 
    def __init__(self):
        super(Identity, self).__init__()
        
    def forward(self, x):
        return x

# replace aboundent layers to identity layers
model.fc=Identity()
model.dropout=Identity()
model.avgpool=Identity()
model.Mixed_7c=Identity()
model.Mixed_7b=Identity()
model.Mixed_7a=Identity()
model.AuxLogits=Identity()
model.Mixed_6e=Identity()
model.Mixed_6d=Identity()
model.Mixed_6c=Identity()
model.Mixed_6b=Identity()
model.Mixed_6a=Identity()
#model.eval()

# check dimensions 
# Download an example image from the pytorch website
import urllib
url, filename = ("https://github.com/pytorch/hub/raw/master/images/dog.jpg", "dog.jpg")
try: urllib.URLopener().retrieve(url, filename)
except: urllib.request.urlretrieve(url, filename)

# sample execution (requires torchvision)
from PIL import Image
from torchvision import transforms
input_image = Image.open(filename)
preprocess = transforms.Compose([
    transforms.Resize(299),
    transforms.CenterCrop(299),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])
input_tensor = preprocess(input_image)
input_batch = input_tensor.unsqueeze(0) # create a mini-batch as expected by the model

# move the input and model to GPU for speed if available
if torch.cuda.is_available():
    input_batch = input_batch.to('cuda')
    model.to('cuda')

with torch.no_grad():
  output = model(input_batch)

# Tensor of shape 1000, with confidence scores over Imagenet's 1000 classes
print(output.view(-1,288,35,35).shape)

# need conv2d conv2d and spatial softmax
class Last_two_conv(nn.Module):
    def __init__(self, in_channels,hidden_channels,out_channels):
        super(Last_two_conv, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, hidden_channels,
                               kernel_size=5)
        self.relu1 = nn.ReLU()
        self.conv2 = nn.Conv2d(hidden_channels, out_channels,
                               kernel_size=5)
        self.relu2 = nn.ReLU()

    def forward(self, x):
        # reshape
        x = x.view(-1,288,35,35)
        x = self.conv1(x)
        # Activation function
        x = self.relu1(x)
        # Second convolutional layer
        x = self.conv2(x)
        # Activation function
        x = self.relu2(x)
        return x

# replace the layer with last_two_conv

model.dropout=Last_two_conv(288,32,16)
with torch.no_grad():
  output = model(input_batch)
print(output.view(-1,16,27,27).shape)

# define spatialsofrmax
import numpy as np
class SpatialSoftmax(torch.nn.Module):
    def __init__(self, height, width, channel, temperature=None):
        super(SpatialSoftmax, self).__init__()
        self.height = height
        self.width = width
        self.channel = channel

        if temperature:  
          self.temperature = torch.ones(1)*temperature   
        else:   
          self.temperature = nn.Parameter(torch.ones(1))  

        pos_x, pos_y = np.meshgrid(
                np.linspace(-1., 1., self.height),
                np.linspace(-1., 1., self.width)
                )
        pos_x = torch.from_numpy(pos_x.reshape(self.height*self.width)).float()
        pos_y = torch.from_numpy(pos_y.reshape(self.height*self.width)).float()
        self.register_buffer('pos_x', pos_x)
        self.register_buffer('pos_y', pos_y)
        self.linear =nn.Linear(32, 32)

    def forward(self, feature):

        #feature = feature.view(-1,16,self.height*self.width)
        feature = feature.view(-1,self.height*self.width)

        softmax_attention = nn.functional.softmax(feature/self.temperature, dim=-1)
        expected_x = torch.sum(self.pos_x*softmax_attention, dim=1, keepdim=True)
        expected_y = torch.sum(self.pos_y*softmax_attention, dim=1, keepdim=True)
        expected_xy = torch.cat([expected_x, expected_y], 1)
        feature_keypoints = expected_xy.view(-1, self.channel*2)
        feature_keypoints = self.linear(feature_keypoints)

        return feature_keypoints

# replace fc layer with spatial softmax
model.fc=SpatialSoftmax(27,27,16,temperature=None)
with torch.no_grad():
  output = model(input_batch)
print(output.shape)
print(input_batch.shape)

"""triplelet loss test"""

torch.manual_seed(0)
triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2,reduction='sum')
anchor = torch.randn(1, 1, requires_grad=True)
positive = torch.randn(1, 1, requires_grad=True)
negative = torch.randn(1, 1, requires_grad=True)
print(anchor)
print(positive)
print(negative)

output = triplet_loss(anchor, positive, negative)
print(output)
nn.functional.relu((anchor-positive).norm(dim=0,p=2)-(anchor-negative).norm(dim=0,p=2)+1)

torch.manual_seed(0)
triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2,reduction='sum') # input data
anchor = torch.randn(1,32, 1, requires_grad=True) # 1 X 32 x 1
positive = torch.randn(4,32, 1, requires_grad=True) # 4 X 32 X 1
negative = torch.randn(10,32, 1, requires_grad=True) # N-4 X 32 X 1
print(anchor)
print(positive)
print(negative)

output = triplet_loss(anchor, positive, negative)
print(output)
nn.functional.relu((anchor-positive).norm(dim=1,p=2)-(anchor-negative).norm(dim=1,p=2)+1).sum(dim=0)

torch.manual_seed(0)
triplet_loss = nn.TripletMarginLoss(margin=1.0, p=2,reduction='sum')
anchor = torch.randn(3,3, 1, requires_grad=True)
positive = torch.randn(3,3, 5, requires_grad=True)
negative = torch.randn(3,3, 10, requires_grad=True)
print(anchor)
print(positive)
print(negative)

output = triplet_loss(anchor, positive, negative) # anchor size Nsample x d x 1, positive size Nsample x d x window, negative size Nsample x d x (Nsample-window)
print(output)
print(anchor-positive)
print((anchor-positive).norm(dim=1,p=2))
#(anchor-positive).norm(dim=2,p=2)-(anchor-negative).norm(dim=2,p=2)+1
nn.functional.relu((anchor-positive).norm(dim=1,p=2)-(anchor-negative).norm(dim=1,p=2)+1)

# Initialize embeddings
embedding = nn.Embedding(1000, 128)
anchor_ids = torch.randint(0, 1000, (1,))
positive_ids = torch.randint(0, 1000, (1,))
negative_ids = torch.randint(0, 1000, (1,))
anchor = embedding(anchor_ids)
positive = embedding(positive_ids)
negative = embedding(negative_ids)
# Built-in Distance Function
triplet_loss = \
    nn.TripletMarginWithDistanceLoss(distance_function=nn.PairwiseDistance())
output = triplet_loss(anchor, positive, negative)
print(anchor_ids)